<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>net.isometry.alfred.ssh</string>
	<key>connections</key>
	<dict>
		<key>73503A72-F4BD-4C29-B531-ACE7CF405F6B</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>027D62F5-14E9-4EA0-BE27-57C38B1ECC1F</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Robin Breathe</string>
	<key>description</key>
	<string>Open Secure SHell with smart hostname autocompletion</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Open SSH</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>4</integer>
				<key>keyword</key>
				<string>ssh</string>
				<key>runningsubtext</key>
				<string>Please Wait: matching hostâ€¦</string>
				<key>script</key>
				<string># Open SSH.alfredworkflow, v0.9
# Robin Breathe, 2013

import json
from os import path
import xml.etree.ElementTree as ET
import re
import .alfred


query = "{query}"

bonjour_timeout = 0.1

if '@' in query:
    (user, host) = query.split('@', 1)
else:
    (user, host) = (None, query)

host_chars = map(lambda x: '\.' if x is '.' else x, list(host))
pattern = re.compile('.*?%s' % '.*?\b?'.join(host_chars), flags=re.IGNORECASE)

arg = lambda u, h: u and '@'.join([u,h]) or h

class SSHItem(alfred.Item):
    def __init__(user, host):
        _arg = arg(user, host)
        _uri = 'ssh://%s' % _arg
        return super(SSHItem, self).__init__(attributes={'uid':_uri, 'arg':_arg},
            title=_uri, subtitle='SSH to %s' % host, icon='icon.png')

def fetch_ssh_config(_path):
    results = set([])
    try:
        with open(path.expanduser(_path), 'r') as ssh_config:
            for line in (x for x in ssh_config if x.startswith('Host ')):
                results.update((x for x in line.split()[1:] if not ('*' in x or '?' in x or '!' in x)))
    except IOError:
        pass
    return results

def fetch_known_hosts(_path):
    results = set([])
    try:
        with open(path.expanduser(_path), 'r') as known_hosts:
            for line in known_hosts:
                results.update(line.split()[0].split(','))
    except IOError:
        pass
    return results

def fetch_hosts(_path):
    results = set([])
    try:
        with open(_path, 'r') as etc_hosts:
            for line in (x for x in etc_hosts if not x.startswith('#')):
                results.update(line.split()[1:])
        results.discard('broadcasthost')
    except IOError:
        pass
    return results

def fetch_bonjour(_service):
    results = set([])
    try:
        from pybonjour import DNSServiceBrowse, DNSServiceProcessResult
        from select import select
        bj_callback = lambda s, f, i, e, n, t, d: results.add('%s.%s' % (n, d))
        bj_browser = DNSServiceBrowse(regtype = _service, callBack = bj_callback)
        select([bj_browser], [], [], bonjour_timeout)
        DNSServiceProcessResult(bj_browser)
        bj_browser.close()
    except ImportError:
        pass
    return results

hosts = set([])
hosts.update(fetch_ssh_config('~/.ssh/config'))
hosts.update(fetch_known_hosts('~/.ssh/known_hosts'))
hosts.update(fetch_hosts('/etc/hosts'))
hosts.update(fetch_bonjour('_ssh._tcp'))
hosts.discard(host)

results = [SSHItem(user, host)]
for host in (x for x in hosts if pattern.match(x)):
    results.append(SSHItem(user, host))

print alfred.xml(results)
</string>
				<key>subtext</key>
				<string>Open Secure SHell with smart hostname autocompletion</string>
				<key>title</key>
				<string>Open SSH</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>73503A72-F4BD-4C29-B531-ACE7CF405F6B</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>plusspaces</key>
				<false/>
				<key>url</key>
				<string>ssh://{query}</string>
				<key>utf8</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.openurl</string>
			<key>uid</key>
			<string>027D62F5-14E9-4EA0-BE27-57C38B1ECC1F</string>
		</dict>
	</array>
	<key>readme</key>
	<string>Easily open remote SSH sessions using your default ssh: protocol handler (the default being Terminal.app) with full anchored hostname autocompletion against the contents of ~/.ssh/known_hosts (every host you've connected to before), /etc/hosts and, optionally, Bonjour (Back to My Mac and local hosts advertising their ability to accept SSH connections).

In order to enable Bonjour discovery, you must install the pybonjour module: `&gt; sudo /usr/bin/easy_install pybonjour`</string>
	<key>uidata</key>
	<dict>
		<key>027D62F5-14E9-4EA0-BE27-57C38B1ECC1F</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>73503A72-F4BD-4C29-B531-ACE7CF405F6B</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
	</dict>
	<key>webaddress</key>
	<string>http://isometry.net/</string>
</dict>
</plist>
